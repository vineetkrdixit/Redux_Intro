Component folder - consist of all the view whose data are not in the Store
Container folder - consit of all the view whose data are in the Store

/\*\*

- Importance of Redux
- Data flow inside redux which is derived from the FLUX
- What are different main entities which are involved in redux.
- Actions, Reducers and the Store.
- View -> Generates Events -> Processed by Controller -> Generates Actions
- Generated Actions-> Dispatched to Various Reducers by Redux(library)-> Reducers update the store.
- Store is updated -> All the UI elements connected to that store or the data point gets re-rendered.
- react, redux, react-redux.
  \*/

Redux Inbuilt functions :-
dispatch({type,payload})
connect(mapStateToProps,mapDispatchToProps)
Provider
combineReducers-to combine many redusers
createStore, applyMiddleware
thunkMiddleware

usefulFunctions :-
mapStateToProps
mapDispatchToProps

/\*\*

- Here combineReducers have ({
- filename:functionName})
  \*/

  how to use redux

  1.wrap App in Provide in index.js in root of the proggrame
  import store
  <Provider store={store}>
  <App/>
  </Provider>

  2.create a Action
  const CounterAction={
  all the action:action-Types
  ex:
  increment:counter/increment
  }

  3.Create Reduser
  reduser is a plain javaScript function which has to be exported
  always give store a initial value

const CounterReduser=(store,action)=>{
switch(action.type){
case "counter/increment":{
return what you want to excute}
}

4.Create store
import creteStore

import redusers
const store=createStore(redusers)

export default store

5.on the container page
